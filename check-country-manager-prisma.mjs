import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  log: ['error', 'warn']
});

async function checkCountryManager() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º country_manager...\n');

    // 1. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å 'country' –≤ login
    console.log('=== 1. –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å country –≤ login ===');
    const allCountry = await prisma.user.findMany({
      where: {
        login: {
          contains: 'country',
          mode: 'insensitive'
        }
      },
      select: {
        id: true,
        login: true,
        name: true,
        email: true,
        role: true,
        isActive: true,
        password: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${allCountry.length}\n`);
    
    allCountry.forEach((user, i) => {
      console.log(`--- –ó–∞–ø–∏—Å—å ${i + 1} ---`);
      console.log(`ID: ${user.id}`);
      console.log(`Login: "${user.login}" (–¥–ª–∏–Ω–∞: ${user.login.length})`);
      console.log(`Name: "${user.name}"`);
      console.log(`Email: "${user.email}"`);
      console.log(`Role: ${user.role}`);
      console.log(`isActive: ${user.isActive}`);
      console.log(`Password hash: ${user.password}`);
      console.log(`Password length: ${user.password?.length}`);
      console.log(`Password starts with: ${user.password?.substring(0, 10)}`);
      console.log(`Created: ${user.createdAt}`);
      console.log(`Updated: ${user.updatedAt}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
      const loginBytes = Buffer.from(user.login).toString('hex');
      console.log(`Login (hex): ${loginBytes}`);
      console.log('');
    });

    // 2. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('=== 2. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ country_manager ===');
    const exact = await prisma.user.findUnique({
      where: {
        login: 'country_manager'
      }
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ: ${exact ? '–î–ê' : '–ù–ï–¢'}\n`);
    if (exact) {
      console.log('–î–µ—Ç–∞–ª–∏:');
      console.log(`ID: ${exact.id}`);
      console.log(`Login: "${exact.login}"`);
      console.log(`isActive: ${exact.isActive}`);
    }

    // 3. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n=== 3. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===');
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        login: true,
        name: true,
        email: true,
        role: true,
        isActive: true
      },
      orderBy: {
        id: 'asc'
      }
    });
    
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}\n`);
    allUsers.forEach(user => {
      console.log(`${user.id} | ${user.login} | ${user.name} | ${user.email} | ${user.role} | Active: ${user.isActive}`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log('\n=== 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã login ===');
    const duplicates = await prisma.user.groupBy({
      by: ['login'],
      _count: {
        login: true
      },
      having: {
        login: {
          _count: {
            gt: 1
          }
        }
      }
    });
    
    if (duplicates.length > 0) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:');
      console.table(duplicates);
    } else {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

checkCountryManager();

