import fs from 'fs';

const filePath = 'src/app/api/team-meetings/route.ts';
let content = fs.readFileSync(filePath, 'utf-8');

// –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const oldCreate = `    // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ JWT payload
    const meeting = await prisma.teamMeeting.create({
      data: {
        userId: user.userId,  // userId –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞`;

const newCreate = `    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏
    console.log('üìù Creating meeting for userId:', user.userId);
    const existingUser = await prisma.user.findUnique({
      where: { id: user.userId },
      select: { id: true }
    });

    if (!existingUser) {
      console.error('‚ùå User not found:', user.userId);
      return NextResponse.json(
        { message: '–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' },
        { status: 400 }
      );
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ JWT payload
    const meeting = await prisma.teamMeeting.create({
      data: {
        userId: user.userId,  // userId –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞`;

content = content.replace(oldCreate, newCreate);

fs.writeFileSync(filePath, content);
console.log('‚úÖ Fixed team-meetings.ts - added user verification');
