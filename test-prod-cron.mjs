import https from 'https';

const PROD_URL = 'cleanwhale-hr-analytics.vercel.app';
const CRON_SECRET = 'cleanwhale_cron_secret_2024_secure_key';

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ–Ω-–∑–∞–¥–∞—á—É –Ω–∞ PRODUCTION\n');
console.log(`üìç URL: https://${PROD_URL}/api/cron/weekly-report`);
console.log(`üîë Using CRON_SECRET\n`);

const options = {
  hostname: PROD_URL,
  port: 443,
  path: '/api/cron/weekly-report',
  method: 'GET',
  headers: {
    'Authorization': `Bearer ${CRON_SECRET}`,
    'Content-Type': 'application/json',
    'User-Agent': 'Test-Client'
  }
};

console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω...\n');

const req = https.request(options, (res) => {
  let data = '';

  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    console.log(`üìä HTTP Status: ${res.statusCode}\n`);
    
    try {
      const json = JSON.parse(data);
      console.log('‚úÖ Response –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      console.log(JSON.stringify(json, null, 2));
      
      if (json.success && json.sentToTelegram) {
        console.log('\nüéâ –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –ò–ó PRODUCTION –í TELEGRAM!\n');
      }
    } catch (e) {
      console.log('üìÑ Response (raw):', data);
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
});

req.end();

setTimeout(() => {
  console.log('\n‚è±Ô∏è Timeout - –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
  process.exit(1);
}, 15000);
