#!/usr/bin/env node
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Vercel API
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!
 */

import crypto from 'crypto';
import https from 'https';
import { config } from 'dotenv';

config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function generateSecret(length) {
  return crypto.randomBytes(length).toString('base64');
}

async function makeVercelRequest(method, path, data = null) {
  const token = process.env.VERCEL_TOKEN;
  const projectId = process.env.VERCEL_PROJECT_ID;

  if (!token) {
    throw new Error('VERCEL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  }

  if (!projectId) {
    throw new Error('VERCEL_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  }

  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.vercel.com',
      port: 443,
      path: path.replace(':projectId', projectId),
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          resolve(JSON.parse(body || '{}'));
        } else {
          reject(new Error(`API Error ${res.statusCode}: ${body}`));
        }
      });
    });

    req.on('error', reject);

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function getExistingEnvVars() {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...', 'cyan');
  try {
    const result = await makeVercelRequest('GET', '/v9/projects/:projectId/env');
    return result.envs || [];
  } catch (error) {
    log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${error.message}`, 'yellow');
    return [];
  }
}

async function upsertEnvVar(key, value, existingVars) {
  const existing = existingVars.find(v => v.key === key && v.target.includes('production'));

  if (existing) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    log(`  üìù –û–±–Ω–æ–≤–ª—è—é ${key}...`, 'yellow');
    try {
      await makeVercelRequest('PATCH', `/v10/projects/:projectId/env/${existing.id}`, {
        value: value,
        target: ['production'],
      });
      log(`  ‚úÖ ${key} –æ–±–Ω–æ–≤–ª–µ–Ω`, 'green');
      return true;
    } catch (error) {
      log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${key}: ${error.message}`, 'red');
      return false;
    }
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    log(`  ‚ûï –°–æ–∑–¥–∞—é ${key}...`, 'cyan');
    try {
      await makeVercelRequest('POST', '/v10/projects/:projectId/env', {
        key: key,
        value: value,
        type: 'encrypted',
        target: ['production'],
      });
      log(`  ‚úÖ ${key} —Å–æ–∑–¥–∞–Ω`, 'green');
      return true;
    } catch (error) {
      log(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${key}: ${error.message}`, 'red');
      return false;
    }
  }
}

async function triggerRedeploy() {
  log('\nüöÄ –ó–∞–ø—É—Å–∫–∞—é redeploy...', 'cyan');
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π production deployment
    const deployments = await makeVercelRequest('GET', '/v6/deployments?projectId=:projectId&target=production&limit=1');
    
    if (deployments.deployments && deployments.deployments.length > 0) {
      const lastDeployment = deployments.deployments[0];
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º redeploy
      await makeVercelRequest('POST', `/v13/deployments`, {
        name: lastDeployment.name,
        project: process.env.VERCEL_PROJECT_ID,
        target: 'production',
        gitSource: lastDeployment.meta?.githubCommitRef ? {
          type: 'github',
          ref: lastDeployment.meta.githubCommitRef,
          repo: lastDeployment.meta.githubCommitRepo,
          org: lastDeployment.meta.githubCommitOrg,
        } : undefined,
      });
      
      log('‚úÖ Redeploy –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'green');
      return true;
    } else {
      log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ deployments', 'yellow');
      return false;
    }
  } catch (error) {
    log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å redeploy: ${error.message}`, 'yellow');
    log('üí° Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–µ–ª–∞–µ—Ç redeploy –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–º–º–∏—Ç–µ', 'cyan');
    return false;
  }
}

async function main() {
  log('\nüîê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–ö–†–ï–¢–û–í –ß–ï–†–ï–ó VERCEL API', 'blue');
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'blue');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (!process.env.VERCEL_TOKEN) {
    log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω VERCEL_TOKEN', 'red');
    log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:', 'yellow');
    log('1. –ó–∞–π–¥–∏ –Ω–∞ https://vercel.com/account/tokens', 'cyan');
    log('2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (Create Token)', 'cyan');
    log('3. –°–∫–æ–ø–∏—Ä—É–π –µ–≥–æ –∏ –¥–æ–±–∞–≤—å –≤ .env —Ñ–∞–π–ª:', 'cyan');
    log('   VERCEL_TOKEN=your_token_here\n', 'green');
    process.exit(1);
  }

  if (!process.env.VERCEL_PROJECT_ID) {
    log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω VERCEL_PROJECT_ID', 'red');
    log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:', 'yellow');
    log('1. –ó–∞–π–¥–∏ –Ω–∞ https://vercel.com/dashboard', 'cyan');
    log('2. –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç', 'cyan');
    log('3. Settings ‚Üí General ‚Üí Project ID', 'cyan');
    log('4. –°–∫–æ–ø–∏—Ä—É–π –µ–≥–æ –∏ –¥–æ–±–∞–≤—å –≤ .env —Ñ–∞–π–ª:', 'cyan');
    log('   VERCEL_PROJECT_ID=prj_xxx\n', 'green');
    process.exit(1);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
  log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã...', 'cyan');
  const jwtSecret = generateSecret(64);
  const registrationSecret = generateSecret(32);
  const cronSecret = crypto.randomBytes(32).toString('hex');
  log('‚úÖ –°–µ–∫—Ä–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n', 'green');

  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const existingVars = await getExistingEnvVars();

  // –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  log('üì§ –ó–∞–≥—Ä—É–∂–∞—é —Å–µ–∫—Ä–µ—Ç—ã –≤ Vercel...', 'cyan');
  
  const results = await Promise.all([
    upsertEnvVar('JWT_SECRET', jwtSecret, existingVars),
    upsertEnvVar('REGISTRATION_SECRET', registrationSecret, existingVars),
    upsertEnvVar('CRON_SECRET', cronSecret, existingVars),
  ]);

  const allSuccess = results.every(r => r);

  if (allSuccess) {
    log('\n‚úÖ –í–°–ï –°–ï–ö–†–ï–¢–´ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´ –í VERCEL!', 'green');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å redeploy
    await triggerRedeploy();
    
    log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'blue');
    log('üéâ –ì–û–¢–û–í–û! –°–µ–∫—Ä–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!', 'green');
    log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'blue');
    
    log('üìù –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ:', 'yellow');
    log(`\nJWT_SECRET:\n${jwtSecret}\n`);
    log(`REGISTRATION_SECRET:\n${registrationSecret}\n`);
    log(`CRON_SECRET:\n${cronSecret}\n`);
    
  } else {
    log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –°–ï–ö–†–ï–¢–´ –ù–ï –£–î–ê–õ–û–°–¨ –û–ë–ù–û–í–ò–¢–¨', 'yellow');
    log('–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ VERCEL_TOKEN', 'yellow');
  }
}

main().catch(error => {
  log(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`, 'red');
  if (error.stack) {
    log(error.stack, 'red');
  }
  process.exit(1);
});

