#!/usr/bin/env node

import { Client } from 'pg';
import bcrypt from 'bcryptjs';

const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function testPassword() {
  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await client.query(`
      SELECT login, password, name 
      FROM "users" 
      WHERE login = 'country_manager'
    `);

    if (result.rows.length > 0) {
      const user = result.rows[0];
      const storedPasswordHash = user.password;
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è country_manager:');
      console.log(`   –•–µ—à –≤ –±–∞–∑–µ: ${storedPasswordHash.substring(0, 20)}...`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
      const testPasswords = ['password123', 'country123', 'admin123', 'country_manager'];
      
      for (const testPassword of testPasswords) {
        const isValid = await bcrypt.compare(testPassword, storedPasswordHash);
        console.log(`   –ü–∞—Ä–æ–ª—å "${testPassword}": ${isValid ? '‚úÖ –í–ï–†–ù–´–ô' : '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}`);
        
        if (isValid) {
          console.log(`\nüéØ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–û–õ–¨: "${testPassword}"`);
          break;
        }
      }
      
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å country_manager –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

testPassword();
