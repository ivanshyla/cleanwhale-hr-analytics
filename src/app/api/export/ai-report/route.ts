export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '@/lib/auth';
import { getOpenAIClient } from '@/lib/openai';
import { prisma } from '@/lib/prisma';
import { isoWeekOf, getPreviousWeek, formatWeekForDisplay } from '@/lib/week';

export async function POST(request: NextRequest) {
  const authResult = requireAuth(request);
  if (authResult.error) return authResult.error;

  const { user } = authResult;

  // –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN –∏ COUNTRY_MANAGER
  if (user.role !== 'ADMIN' && user.role !== 'COUNTRY_MANAGER') {
    return NextResponse.json(
      { message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
      { status: 403 }
    );
  }

  try {
    const { weekIso } = await request.json();
    const targetWeek = weekIso || isoWeekOf();

    const client = getOpenAIClient();
    if (!client) {
      return NextResponse.json(
        { message: 'AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API –∫–ª—é—á' },
        { status: 503 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏
    const weeks = [targetWeek];
    let week = targetWeek;
    for (let i = 0; i < 3; i++) {
      week = getPreviousWeek(week);
      weeks.push(week);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const reports = await prisma.weeklyReport.findMany({
      where: {
        weekIso: {
          in: weeks
        }
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            role: true,
            city: true,
            login: true
          }
        },
        hrMetrics: true,
        opsMetrics: true
      },
      orderBy: {
        weekIso: 'desc'
      }
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
    const weeklyData = weeks.map(w => {
      const weekReports = reports.filter(r => r.weekIso === w);
      
      return {
        weekIso: w,
        weekDisplay: formatWeekForDisplay(w),
        totalEmployees: weekReports.length,
        totalWorkdays: weekReports.reduce((sum, r) => sum + (r.workdays || 0), 0),
        avgStress: weekReports.length > 0 
          ? (weekReports.reduce((sum, r) => sum + (r.stressLevel || 0), 0) / weekReports.length).toFixed(1)
          : '0',
        totalOvertime: weekReports.filter(r => r.overtime).length,
        
        // HR –º–µ—Ç—Ä–∏–∫–∏
        totalInterviews: weekReports.reduce((sum, r) => 
          sum + (r.hrMetrics?.interviews || 0), 0),
        totalJobPosts: weekReports.reduce((sum, r) => 
          sum + (r.hrMetrics?.jobPosts || 0), 0),
        totalRegistered: weekReports.reduce((sum, r) => 
          sum + (r.hrMetrics?.registered || 0), 0),
        
        // Ops –º–µ—Ç—Ä–∏–∫–∏
        totalMessages: weekReports.reduce((sum, r) => 
          sum + (r.opsMetrics?.messages || 0), 0),
        totalOrders: weekReports.reduce((sum, r) => 
          sum + (r.opsMetrics?.orders || 0), 0),
        
        // –ü–æ –≥–æ—Ä–æ–¥–∞–º
        byCity: aggregateByCity(weekReports),
        
        // –ü–æ —Ç–∏–ø–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        byType: aggregateByType(weekReports),
        
        // –î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        employees: weekReports.map(r => ({
          name: r.user.name,
          role: r.user.role,
          city: r.user.city,
          workdays: r.workdays,
          stress: r.stressLevel,
          overtime: r.overtime,
          registered: r.hrMetrics?.registered || 0,
          interviews: r.hrMetrics?.interviews || 0,
          messages: r.opsMetrics?.messages || 0,
          orders: r.opsMetrics?.orders || 0
        }))
      };
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    const prompt = `–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ HR/Operations –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CleanWhale Poland. 

–°–æ–∑–¥–∞–π –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏.

–î–ê–ù–ù–´–ï –ó–ê 4 –ù–ï–î–ï–õ–ò:
${JSON.stringify(weeklyData, null, 2)}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–ß–ï–¢–£:

1. **EXECUTIVE SUMMARY** (2-3 –∞–±–∑–∞—Ü–∞)
   - –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
   - –ì–ª–∞–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

2. **–î–ò–ù–ê–ú–ò–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ú–ï–¢–†–ò–ö**
   –î–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∂–∏ —Ç—Ä–µ–Ω–¥ –∑–∞ 4 –Ω–µ–¥–µ–ª–∏:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–Ω–∞–π–º)
   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
   - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∫–æ–º–∞–Ω–¥—ã
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫
   - –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã: ‚Üë (—Ä–æ—Å—Ç), ‚Üì (–ø–∞–¥–µ–Ω–∏–µ), ‚Üí (—Å—Ç–∞–±–∏–ª—å–Ω–æ)
   - –£–∫–∞–∂–∏ % –∏–∑–º–µ–Ω–µ–Ω–∏—è

3. **–ê–ù–ê–õ–ò–ó –ü–û –ì–û–†–û–î–ê–ú**
   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π
   - –í—ã—è–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π

4. **–ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î–´**
   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
   - –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∑–∞–¥–∞—á

5. **–ü–†–û–ì–ù–û–ó –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ**
   –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π:
   - –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
   - –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏, –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å)
   - –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º

6. **–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**
   - –¢–æ–ø-3 –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–§–û–†–ú–ê–¢:
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω–æ–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (üìä üìà üìâ ‚ö†Ô∏è ‚úÖ üéØ üí°)
- –û–±—â–∏–π –æ–±—ä–µ–º: 800-1200 —Å–ª–æ–≤

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    const completion = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π HR/Operations –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ executive reports.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 3000
    });

    const report = completion.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç';

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const fullReport = `# üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç CleanWhale Poland

**–ü–µ—Ä–∏–æ–¥:** ${formatWeekForDisplay(targetWeek)}  
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}  
**–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª:** ${user.name} (${user.role})

---

${report}

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º CleanWhale Analytics*
`;

    return NextResponse.json({
      success: true,
      report: fullReport,
      weekIso: targetWeek,
      generatedAt: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('Error generating AI report:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞',
        error: error.message 
      },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function aggregateByCity(reports: any[]) {
  const cities = new Map();
  
  reports.forEach(r => {
    const city = r.user.city;
    if (!cities.has(city)) {
      cities.set(city, {
        city,
        employees: 0,
        workdays: 0,
        registered: 0,
        orders: 0,
        avgStress: 0,
        stressSum: 0
      });
    }
    
    const data = cities.get(city);
    data.employees++;
    data.workdays += r.workdays || 0;
    data.registered += r.hrMetrics?.registered || 0;
    data.orders += r.opsMetrics?.orders || 0;
    data.stressSum += r.stressLevel || 0;
  });
  
  return Array.from(cities.values()).map(d => ({
    ...d,
    avgStress: d.employees > 0 ? (d.stressSum / d.employees).toFixed(1) : '0'
  }));
}

function aggregateByType(reports: any[]) {
  const types = new Map();
  
  reports.forEach(r => {
    const type = r.user.role;
    if (!types.has(type)) {
      types.set(type, {
        type,
        count: 0,
        workdays: 0,
        registered: 0,
        orders: 0,
        avgStress: 0,
        stressSum: 0
      });
    }
    
    const data = types.get(type);
    data.count++;
    data.workdays += r.workdays || 0;
    data.registered += r.hrMetrics?.registered || 0;
    data.orders += r.opsMetrics?.orders || 0;
    data.stressSum += r.stressLevel || 0;
  });
  
  return Array.from(types.values()).map(d => ({
    ...d,
    avgStress: d.count > 0 ? (d.stressSum / d.count).toFixed(1) : '0'
  }));
}

