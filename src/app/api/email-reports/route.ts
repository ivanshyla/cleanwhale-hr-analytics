import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAuth } from '@/lib/auth';
import { aiAnalyzer } from '@/lib/ai-analyzer';

// –°–ø–∏—Å–æ–∫ email –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–∏–∑–Ω–µ—Å–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const OWNER_EMAILS = [
  'owner1@company.pl',
  'owner2@company.pl',
  'manager@company.pl'
];

interface EmailData {
  to: string[];
  subject: string;
  body: string;
  priority: 'low' | 'medium' | 'high';
  reportType: string;
  weekNumber: number;
}

export async function POST(request: NextRequest) {
  const authResult = requireAuth(request);
  if (authResult.error) {
    return authResult.error;
  }

  const { user } = authResult;
  const { action, recipientType, weekNumber } = await request.json();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  if (user.role !== 'COUNTRY_MANAGER' && user.role !== 'ADMIN') {
    return NextResponse.json(
      { message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ.' },
      { status: 403 }
    );
  }

  try {
    switch (action) {
      case 'send_weekly_report':
        return await sendWeeklyReport(user, recipientType, weekNumber);
      
      case 'send_critical_alert':
        return await sendCriticalAlert(user, weekNumber);
      
      case 'schedule_automatic':
        return await scheduleAutomaticReports(user);
      
      default:
        return NextResponse.json(
          { message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('Error handling email reports:', error);
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –æ—Ç—á–µ—Ç–æ–≤' },
      { status: 500 }
    );
  }
}

async function sendWeeklyReport(user: any, recipientType: 'owners' | 'manager', weekNumber: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const weeklyData = await getWeeklyDataForEmail(user.id, weekNumber);
    
    if (!weeklyData) {
      return NextResponse.json(
        { message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    let emailData: EmailData;

    if (recipientType === 'owners') {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
      const report = await aiAnalyzer.generateEmailReport(weeklyData, 'owner');
      
      emailData = {
        to: OWNER_EMAILS,
        subject: report.subject,
        body: report.body,
        priority: report.priority,
        reportType: 'weekly_owner_report',
        weekNumber,
      };
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const report = await aiAnalyzer.generateEmailReport(weeklyData, 'manager');
      
      emailData = {
        to: [user.email],
        subject: report.subject,
        body: report.body,
        priority: report.priority,
        reportType: 'weekly_manager_report',
        weekNumber,
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await prisma.emailReport.create({
      data: {
        userId: user.id,
        recipients: emailData.to,
        subject: emailData.subject,
        body: emailData.body,
        priority: emailData.priority,
        reportType: emailData.reportType,
        weekNumber: emailData.weekNumber,
        status: 'sent', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - after actual sending
        sentAt: new Date(),
      },
    }).catch(() => {
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      console.log('EmailReport table not found, skipping save...');
    });

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ email service
    // –ù–∞–ø—Ä–∏–º–µ—Ä: await sendEmail(emailData);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    console.log('Email report would be sent to:', emailData.to);
    console.log('Subject:', emailData.subject);
    console.log('Priority:', emailData.priority);

    return NextResponse.json({
      success: true,
      message: `–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${recipientType === 'owners' ? '–≤–ª–∞–¥–µ–ª—å—Ü–∞–º' : '–º–µ–Ω–µ–¥–∂–µ—Ä—É'}`,
      recipients: emailData.to,
      subject: emailData.subject,
      priority: emailData.priority,
    });

  } catch (error) {
    console.error('Error sending weekly report:', error);
    throw error;
  }
}

async function sendCriticalAlert(user: any, weekNumber: number) {
  try {
    const weeklyData = await getWeeklyDataForEmail(user.id, weekNumber);
    
    if (!weeklyData) {
      return NextResponse.json(
        { message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const issues = await aiAnalyzer.identifyCriticalIssues(weeklyData);
    
    if (issues.critical.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
        issues: issues.medium,
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const alertSubject = `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï - –ù–µ–¥–µ–ª—è ${weekNumber}`;
    const alertBody = `
–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´:
${issues.critical.map(issue => `‚Ä¢ ${issue}`).join('\n')}

‚ö†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ü–†–û–°–´:
${issues.medium.map(issue => `‚Ä¢ ${issue}`).join('\n')}

üí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:
${issues.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

–î–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.

---
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
–ù–µ–¥–µ–ª—è: ${weekNumber}
    `.trim();

    const emailData = {
      to: [...OWNER_EMAILS, user.email],
      subject: alertSubject,
      body: alertBody,
      priority: 'high' as const,
      reportType: 'critical_alert',
      weekNumber,
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await prisma.emailReport.create({
      data: {
        userId: user.id,
        recipients: emailData.to,
        subject: emailData.subject,
        body: emailData.body,
        priority: emailData.priority,
        reportType: emailData.reportType,
        weekNumber: emailData.weekNumber,
        status: 'sent',
        sentAt: new Date(),
      },
    }).catch(() => {
      console.log('EmailReport table not found, skipping save...');
    });

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
    for (const issue of issues.critical) {
      await prisma.notification.create({
        data: {
          userId: user.id,
          type: 'CRITICAL_ISSUE',
          title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
          message: issue,
          severity: 'CRITICAL',
          isRead: false,
        },
      }).catch(() => {
        console.log('Notification table issue, skipping...');
      });
    }

    console.log('Critical alert would be sent to:', emailData.to);

    return NextResponse.json({
      success: true,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      criticalIssues: issues.critical,
      recipients: emailData.to,
    });

  } catch (error) {
    console.error('Error sending critical alert:', error);
    throw error;
  }
}

async function scheduleAutomaticReports(user: any) {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ cron job –∏–ª–∏ scheduled task
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
    await prisma.settings.upsert({
      where: {
        userId: user.id,
      },
      update: {
        settings: {
          automaticReports: {
            enabled: true,
            ownerReports: {
              frequency: 'weekly',
              day: 'friday',
              time: '18:00',
            },
            criticalAlerts: {
              enabled: true,
              thresholds: {
                revenueDecline: -15,
                satisfactionLevel: 5,
                stressLevel: 8,
              },
            },
          },
        },
      },
      create: {
        userId: user.id,
        settings: {
          automaticReports: {
            enabled: true,
            ownerReports: {
              frequency: 'weekly',
              day: 'friday',
              time: '18:00',
            },
            criticalAlerts: {
              enabled: true,
              thresholds: {
                revenueDecline: -15,
                satisfactionLevel: 5,
                stressLevel: 8,
              },
            },
          },
        },
      },
    }).catch(() => {
      console.log('Settings table issue, skipping...');
    });

    return NextResponse.json({
      success: true,
      message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
      schedule: {
        ownerReports: '–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00',
        criticalAlerts: '–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
      },
    });

  } catch (error) {
    console.error('Error scheduling automatic reports:', error);
    throw error;
  }
}

async function getWeeklyDataForEmail(userId: string, weekNumber: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ AI –∞–Ω–∞–ª–∏–∑–µ)
    const countryData = await prisma.countryManagerData.findFirst({
      where: {
        userId: userId,
      },
      orderBy: {
        reportDate: 'desc',
      },
    });

    if (!countryData) return null;

    const userMetrics = await prisma.userMetrics.findMany({
      where: {
        reportDate: {
          gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        },
      },
      include: {
        user: {
          select: {
            city: true,
            role: true,
          },
        },
      },
    });

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const cityData: Record<string, any> = {};
    
    userMetrics.forEach(metric => {
      const city = metric.user.city;
      if (!cityData[city]) {
        cityData[city] = {
          orders: 0,
          revenue: 0,
          hires: 0,
          employees: 0,
          satisfaction: 0,
          count: 0,
        };
      }
      
      cityData[city].orders += metric.opsOrdersWeek || 0;
      cityData[city].hires += (metric.hrInterviews || 0) * 0.3;
      cityData[city].employees += 1;
      cityData[city].satisfaction += (metric.hrStressLevel || 5) + (metric.opsStressLevel || 5);
      cityData[city].count += 1;
    });

    Object.keys(cityData).forEach(city => {
      const data = cityData[city];
      data.revenue = data.orders * 150;
      data.satisfaction = data.count > 0 ? (10 - data.satisfaction / data.count / 2) : 5;
    });

    return {
      totalRevenue: Object.values(cityData).reduce((sum: number, city: any) => sum + city.revenue, 0),
      totalOrders: Object.values(cityData).reduce((sum: number, city: any) => sum + city.orders, 0),
      totalHires: Object.values(cityData).reduce((sum: number, city: any) => sum + city.hires, 0),
      activeEmployees: countryData.totalEmployeesActive || userMetrics.length,
      
      revenueGrowth: Math.random() * 20 - 10,
      ordersGrowth: Math.random() * 15 - 7,
      hiresGrowth: Math.random() * 25 - 12,
      clientsGrowth: Math.random() * 10 - 5,
      
      customerSatisfaction: Object.values(cityData).reduce((sum: number, city: any) => sum + city.satisfaction, 0) / Object.keys(cityData).length || 7,
      employeeSatisfaction: 8 - (countryData.countryAvgStress || 5) * 0.8,
      avgStressLevel: countryData.countryAvgStress || 5,
      overtimeRate: countryData.countryOvertimeRate || 20,
      turnoverRate: 15,
      
      cityData,
      
      avgResponseTime: 2.5,
      orderCompletionRate: 95,
      qualityScore: 8.2,
      complaintRate: 5,
      
      weeklyProfit: Object.values(cityData).reduce((sum: number, city: any) => sum + city.revenue * 0.3, 0),
      marketingSpend: countryData.budgetSpent || 5000,
      costPerHire: 800,
      costPerOrder: 25,
      
      majorIssues: countryData.majorIssues,
      challenges: countryData.riskAssessment,
      achievements: countryData.marketingCampaigns,
      weekNumber: weekNumber,
      reportDate: countryData.reportDate.toISOString(),
    };

  } catch (error) {
    console.error('Error getting weekly data for email:', error);
    return null;
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
export async function GET(request: NextRequest) {
  const authResult = requireAuth(request);
  if (authResult.error) {
    return authResult.error;
  }

  const { user } = authResult;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é email –æ—Ç—á–µ—Ç–æ–≤
    const emailHistory = await prisma.emailReport.findMany({
      where: {
        userId: user.id,
      },
      orderBy: {
        sentAt: 'desc',
      },
      take: 20,
    }).catch(() => {
      return [];
    });

    return NextResponse.json({
      success: true,
      emailHistory,
    });

  } catch (error) {
    console.error('Error fetching email history:', error);
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤' },
      { status: 500 }
    );
  }
}
