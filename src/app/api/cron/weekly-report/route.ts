export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { getOpenAIClient } from '@/lib/openai';
import { prisma } from '@/lib/prisma';
import { isoWeekOf, getPreviousWeek, formatWeekForDisplay } from '@/lib/week';
import { sendTelegramMessage, isTelegramConfigured } from '@/lib/telegram';

/**
 * Cron Job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00
 */
export async function GET(request: NextRequest) {
  try {
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: CRON_SECRET –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–∞
    const cronSecret = process.env.CRON_SECRET;
    if (!cronSecret) {
      console.error('‚ùå CRON_SECRET not configured');
      return NextResponse.json({ 
        error: 'Server misconfiguration' 
      }, { status: 500 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const authHeader = request.headers.get('authorization');
    if (authHeader !== `Bearer ${cronSecret}`) {
      console.error('‚ùå Unauthorized cron request');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('‚è∞ Cron job started: Weekly report generation');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
    if (!isTelegramConfigured()) {
      console.error('‚ùå Telegram not configured');
      return NextResponse.json({ 
        success: false, 
        error: 'Telegram not configured' 
      }, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–µ–¥–µ–ª—è = –ø—Ä–æ—à–ª–∞—è)
    const currentWeek = isoWeekOf(new Date());
    const targetWeek = getPreviousWeek(currentWeek);
    console.log('üìÖ Generating report for week:', targetWeek);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏
    const weeks = [targetWeek];
    for (let i = 1; i <= 3; i++) {
      weeks.push(getPreviousWeek(weeks[weeks.length - 1]));
    }

    const allReports = await prisma.weeklyReport.findMany({
      where: {
        weekIso: { in: weeks }
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            role: true,
            city: true
          }
        },
        hrMetrics: true,
        opsMetrics: true
      },
      orderBy: {
        weekIso: 'desc'
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const reports = allReports.filter(r => r.user !== null);

    console.log(`üìä Found ${reports.length} reports for analysis (filtered from ${allReports.length} total)`);

    if (reports.length === 0) {
      const message = `‚ö†Ô∏è *–û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é ${formatWeekForDisplay(targetWeek)}\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n- –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã\n\n_CleanWhale Analytics_`;
      await sendTelegramMessage(message);
      
      return NextResponse.json({
        success: true,
        message: 'No data available, notification sent',
        weekIso: targetWeek
      });
    }

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const currentWeekData = reports.filter(r => r.weekIso === targetWeek);
    const byCity = aggregateByCity(currentWeekData);
    const byType = aggregateByType(currentWeekData);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
    const openai = getOpenAIClient();
    
    // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const qualitativeData = extractQualitativeData(currentWeekData);

    const prompt = `–¢—ã - –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ CleanWhale, –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–º —É—Å–ª—É–≥–∞–º –≤ –ü–æ–ª—å—à–µ.

–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π executive summary –¥–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é ${formatWeekForDisplay(targetWeek)}.

–î–ê–ù–ù–´–ï:

**–ü–æ –≥–æ—Ä–æ–¥–∞–º:**
${JSON.stringify(byCity, null, 2)}

**–ü–æ —Ç–∏–ø–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:**
${JSON.stringify(byType, null, 2)}

**–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (${weeks.length} –Ω–µ–¥–µ–ª—å):**
${JSON.stringify(aggregateHistorical(reports, weeks), null, 2)}

**–ó–∞–º–µ—Ç–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:**
${qualitativeData.notes.length > 0 ? qualitativeData.notes.map(n => `- ${n.manager} (${n.city}): ${n.text}`).join('\n') : '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'}

**–†–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π:**
${qualitativeData.teamComments.length > 0 ? qualitativeData.teamComments.map(c => `- ${c.manager} (${c.city}): ${c.text}`).join('\n') : '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

**–°–ª–æ–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (HR):**
${qualitativeData.hrDifficulties.length > 0 ? qualitativeData.hrDifficulties.map(d => `- ${d.manager} (${d.city}): ${d.text}`).join('\n') : '–ù–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π'}

**–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–Ω–µ—Ä–∞–º–∏ (Ops):**
${qualitativeData.cleanerIssues.length > 0 ? qualitativeData.cleanerIssues.map(i => `- ${i.manager} (${i.city}): ${i.text}`).join('\n') : '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º'}

**–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (Ops):**
${qualitativeData.clientIssues.length > 0 ? qualitativeData.clientIssues.map(i => `- ${i.manager} (${i.city}): ${i.text}`).join('\n') : '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º'}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–ß–ï–¢–£:

1. **Executive Summary** (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - –≥–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
2. **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏** —Å –¥–∏–Ω–∞–º–∏–∫–æ–π (‚Üë‚Üì) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
3. **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã** - —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–π –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏!)
4. **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è** - —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ
5. **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é** - –∫—Ä–∞—Ç–∫–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.
–§–æ—Ä–º–∞—Ç: Markdown –¥–ª—è Telegram.`;

    console.log('ü§ñ Calling OpenAI API...');
    
    if (!openai) {
      throw new Error('OpenAI client is not initialized');
    }
    
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ HR –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1500
    });

    const aiReport = completion.choices[0]?.message?.content || '–û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω';
    console.log('‚úÖ AI report generated');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const fullReport = `# üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢

**–ù–µ–¥–µ–ª—è:** ${formatWeekForDisplay(targetWeek)}
**–î–∞—Ç–∞:** ${new Date().toLocaleDateString('ru-RU')}

---

${aiReport}

---

_–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç CleanWhale Analytics_
_–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç: ${formatWeekForDisplay(isoWeekOf(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)))}_`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    console.log('üì± Sending to Telegram...');
    const sent = await sendTelegramMessage(fullReport);

    if (!sent) {
      throw new Error('Failed to send Telegram message');
    }

    console.log('‚úÖ Weekly report sent successfully');

    return NextResponse.json({
      success: true,
      message: 'Weekly report generated and sent',
      weekIso: targetWeek,
      sentToTelegram: true,
      reportLength: fullReport.length,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('‚ùå Error in cron job:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
    if (isTelegramConfigured()) {
      try {
        await sendTelegramMessage(
          `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞*\n\n${error.message}\n\n_CleanWhale Analytics Cron Job_`
        );
      } catch (telegramError) {
        console.error('Failed to send error notification:', telegramError);
      }
    }

    return NextResponse.json(
      { 
        success: false,
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function aggregateByCity(reports: any[]) {
  const cities = new Map();
  
  reports.forEach(r => {
    const city = r.user.city;
    if (!cities.has(city)) {
      cities.set(city, {
        city,
        employees: 0,
        workdays: 0,
        registered: 0,
        orders: 0,
        avgStress: 0,
        stressSum: 0
      });
    }
    
    const data = cities.get(city);
    data.employees++;
    data.workdays += r.workdays || 0;
    data.registered += r.hrMetrics?.registrations || 0;
    data.orders += r.opsMetrics?.orders || 0;
    data.stressSum += r.stressLevel || 0;
  });

  cities.forEach(data => {
    data.avgStress = data.employees > 0 ? (data.stressSum / data.employees).toFixed(1) : 0;
    delete data.stressSum;
  });

  return Array.from(cities.values());
}

function aggregateByType(reports: any[]) {
  const types = new Map();
  
  reports.forEach(r => {
    const type = r.user.role;
    if (!types.has(type)) {
      types.set(type, {
        type,
        employees: 0,
        workdays: 0,
        registered: 0,
        orders: 0
      });
    }
    
    const data = types.get(type);
    data.employees++;
    data.workdays += r.workdays || 0;
    data.registered += r.hrMetrics?.registrations || 0;
    data.orders += r.opsMetrics?.orders || 0;
  });

  return Array.from(types.values());
}

function aggregateHistorical(reports: any[], weeks: string[]) {
  return weeks.map(week => {
    const weekReports = reports.filter(r => r.weekIso === week);
    return {
      week,
      totalEmployees: weekReports.length,
      totalWorkdays: weekReports.reduce((sum, r) => sum + (r.workdays || 0), 0),
      totalRegistered: weekReports.reduce((sum, r) => sum + (r.hrMetrics?.registrations || 0), 0),
      totalOrders: weekReports.reduce((sum, r) => sum + (r.opsMetrics?.orders || 0), 0),
      avgStress: weekReports.length > 0 
        ? (weekReports.reduce((sum, r) => sum + (r.stressLevel || 0), 0) / weekReports.length).toFixed(1)
        : 0
    };
  });
}

function extractQualitativeData(reports: any[]) {
  const notes: Array<{manager: string, city: string, text: string}> = [];
  const hrDifficulties: Array<{manager: string, city: string, text: string}> = [];
  const cleanerIssues: Array<{manager: string, city: string, text: string}> = [];
  const clientIssues: Array<{manager: string, city: string, text: string}> = [];
  const teamComments: Array<{manager: string, city: string, text: string}> = [];

  reports.forEach(r => {
    const manager = r.user.name;
    const city = r.user.city;

    // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    if (r.notes && r.notes.trim()) {
      notes.push({ manager, city, text: r.notes.trim() });
    }

    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    if (r.teamComment && r.teamComment.trim()) {
      teamComments.push({ manager, city, text: r.teamComment.trim() });
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ HR
    if (r.hrMetrics?.difficultCases && r.hrMetrics.difficultCases.trim()) {
      hrDifficulties.push({ manager, city, text: r.hrMetrics.difficultCases.trim() });
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–Ω–µ—Ä–∞–º–∏
    if (r.opsMetrics?.diffCleaners && r.opsMetrics.diffCleaners.trim()) {
      cleanerIssues.push({ manager, city, text: r.opsMetrics.diffCleaners.trim() });
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    if (r.opsMetrics?.diffClients && r.opsMetrics.diffClients.trim()) {
      clientIssues.push({ manager, city, text: r.opsMetrics.diffClients.trim() });
    }
  });

  return { notes, teamComments, hrDifficulties, cleanerIssues, clientIssues };
}

