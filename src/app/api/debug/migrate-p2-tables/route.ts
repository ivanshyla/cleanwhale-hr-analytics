import { NextRequest, NextResponse } from 'next/server';
import { Client } from 'pg';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è P2 (CountryAggregate, CountryUserInput)...');

    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
      throw new Error('DATABASE_URL is not set');
    }

    const client = new Client({
      connectionString: DATABASE_URL,
      ssl: {
        rejectUnauthorized: false,
      },
    });

    await client.connect();

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º cities table - –º–µ–Ω—è–µ–º id –Ω–∞ int
    console.log('üèôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É cities...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É cities —Å int id
    await client.query(`
      CREATE TABLE IF NOT EXISTS "cities_new" (
        "id" SERIAL PRIMARY KEY,
        "code" TEXT UNIQUE NOT NULL,
        "name" TEXT NOT NULL,
        "timezone" TEXT NOT NULL DEFAULT 'Europe/Warsaw',
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é
    await client.query(`
      INSERT INTO "cities_new" ("code", "name", "timezone", "isActive", "createdAt")
      SELECT "code", "name", "timezone", "isActive", "createdAt" 
      FROM "cities"
      ON CONFLICT ("code") DO NOTHING;
    `);

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É country_aggregates
    console.log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É country_aggregates...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "country_aggregates" (
        "id" SERIAL PRIMARY KEY,
        "weekIso" TEXT NOT NULL,
        "cityId" INTEGER NOT NULL,
        "trengoResponses" INTEGER NOT NULL DEFAULT 0,
        "crmComplaintsClosed" INTEGER NOT NULL DEFAULT 0,
        "trengoTickets" INTEGER NOT NULL DEFAULT 0,
        "hiredPeople" INTEGER NOT NULL DEFAULT 0,
        "cityOrders" INTEGER NOT NULL DEFAULT 0,
        "notes" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "country_aggregates_weekIso_cityId_key" UNIQUE ("weekIso", "cityId"),
        CONSTRAINT "country_aggregates_cityId_fkey" FOREIGN KEY ("cityId") REFERENCES "cities_new"("id") ON DELETE RESTRICT ON UPDATE CASCADE
      );
    `);

    // 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è country_aggregates
    await client.query(`CREATE INDEX IF NOT EXISTS "country_aggregates_weekIso_idx" ON "country_aggregates"("weekIso");`);

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É country_user_inputs
    console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É country_user_inputs...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "country_user_inputs" (
        "id" SERIAL PRIMARY KEY,
        "weekIso" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "trengoResponses" INTEGER NOT NULL DEFAULT 0,
        "trengoTickets" INTEGER NOT NULL DEFAULT 0,
        "crmComplaintsClosed" INTEGER NOT NULL DEFAULT 0,
        "ordersHandled" INTEGER NOT NULL DEFAULT 0,
        "notes" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "country_user_inputs_weekIso_userId_key" UNIQUE ("weekIso", "userId"),
        CONSTRAINT "country_user_inputs_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE
      );
    `);

    // 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è country_user_inputs
    await client.query(`CREATE INDEX IF NOT EXISTS "country_user_inputs_weekIso_idx" ON "country_user_inputs"("weekIso");`);

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('cities_new', 'country_aggregates', 'country_user_inputs')
      ORDER BY table_name;
    `);

    const cityCount = await client.query(`SELECT COUNT(*) as count FROM "cities_new";`);
    
    const indexesResult = await client.query(`
      SELECT tablename, indexname FROM pg_indexes 
      WHERE tablename IN ('country_aggregates', 'country_user_inputs')
      AND indexname LIKE '%_idx'
      ORDER BY tablename, indexname;
    `);

    await client.end();

    return NextResponse.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü—ã P2 —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
      tables_created: tablesResult.rows.map(row => row.table_name),
      cities_migrated: cityCount.rows[0].count,
      indexes_created: indexesResult.rows,
      steps_completed: [
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ cities_new —Å int id',
        '‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ cities_new',
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ country_aggregates —Å foreign key –Ω–∞ cities_new',
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ country_user_inputs —Å foreign key –Ω–∞ users',
        '‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ weekIso',
        '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã unique constraints –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π',
      ],
      next_steps: [
        '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Country —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        'COUNTRY_MANAGER –º–æ–∂–µ—Ç –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
        '–î–∞–Ω–Ω—ã–µ –æ—Ç country manager –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–∞–º–æ–æ—Ç—á–µ—Ç–∞–º–∏',
      ]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü P2:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        debug: error
      },
      { status: 500 }
    );
  }
}
