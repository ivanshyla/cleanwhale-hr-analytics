export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { guardDebugEndpoint, logDebugAccess } from '@/lib/debug-guard';
import { isoWeekOf, getPreviousWeek } from '@/lib/week';

export async function POST(request: NextRequest) {
  const guardError = guardDebugEndpoint();
  if (guardError) return guardError;
  logDebugAccess('/api/debug/seed-test-data', 'POST');
  
  try {
    console.log('üå± –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    const currentWeek = isoWeekOf();
    const lastWeek = getPreviousWeek(currentWeek);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
    const users = await prisma.user.findMany({
      where: {
        role: {
          in: ['HIRING_MANAGER', 'OPS_MANAGER', 'MIXED_MANAGER']
        }
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤`);

    let createdReports = 0;

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
    for (const user of users) {
      for (const weekIso of [currentWeek, lastWeek]) {
        const [yearStr, weekStr] = weekIso.split('-W');
        const year = parseInt(yearStr);
        const weekNum = parseInt(weekStr);
        const weekStart = new Date(year, 0, 1 + (weekNum - 1) * 7);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç
        const existing = await prisma.weeklyReport.findUnique({
          where: {
            userId_weekIso: {
              userId: user.id,
              weekIso
            }
          }
        });

        if (existing) {
          console.log(`–û—Ç—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${user.login} ${weekIso}`);
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        const report = await prisma.weeklyReport.create({
          data: {
            userId: user.id,
            weekIso,
            weekStartDate: weekStart,
            weekEndDate: weekEnd,
            workdays: 5,
            stressLevel: Math.floor(Math.random() * 5) + 3, // 3-7
            overtime: Math.random() > 0.5,
            overtimeHours: Math.random() > 0.5 ? Math.floor(Math.random() * 8) + 2 : 0,
            isCompleted: true,
            submittedAt: new Date()
          }
        });

        // –°–æ–∑–¥–∞–µ–º HR –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è HR –∏ Mixed –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (user.role === 'HIRING_MANAGER' || user.role === 'MIXED_MANAGER') {
          await prisma.hrMetrics.create({
            data: {
              userId: user.id,
              reportId: report.id,
              weekIso,
              interviews: Math.floor(Math.random() * 10) + 5,
              jobPosts: Math.floor(Math.random() * 5) + 2,
              registrations: Math.floor(Math.random() * 15) + 8,
              fullDays: 5,
              stress: Math.floor(Math.random() * 5) + 3,
              overtime: Math.random() > 0.5
            }
          });
        }

        // –°–æ–∑–¥–∞–µ–º Ops –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Ops –∏ Mixed –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (user.role === 'OPS_MANAGER' || user.role === 'MIXED_MANAGER') {
          await prisma.opsMetrics.create({
            data: {
              userId: user.id,
              reportId: report.id,
              weekIso,
              messages: Math.floor(Math.random() * 100) + 50,
              tickets: Math.floor(Math.random() * 30) + 10,
              orders: Math.floor(Math.random() * 200) + 100,
              fullDays: 5,
              stress: Math.floor(Math.random() * 5) + 3,
              overtime: Math.random() > 0.5
            }
          });
        }

        createdReports++;
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: ${user.login} (${user.role}) –∑–∞ ${weekIso}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã
    const countryManager = await prisma.user.findFirst({
      where: { role: 'COUNTRY_MANAGER' }
    });

    if (countryManager) {
      const meetingDates = [
        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // –í—á–µ—Ä–∞
      ];

      for (const date of meetingDates) {
        await prisma.teamMeeting.create({
          data: {
            userId: countryManager.id,
            meetingName: `–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ ${date.toLocaleDateString('ru-RU')}`,
            meetingDate: date,
            category: 'TEAM_STANDUP',
            attendees: JSON.stringify(users.slice(0, 5).map(u => u.id)),
            attendeeNames: JSON.stringify(users.slice(0, 5).map(u => u.name)),
            summary: `–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏, –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ ${users.slice(0, 5).map(u => u.name).join(', ')}.`
          }
        });
      }
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 –≤—Å—Ç—Ä–µ—á–∏ –∫–æ–º–∞–Ω–¥—ã');
    }

    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!',
      stats: {
        createdReports,
        weeks: [currentWeek, lastWeek],
        users: users.length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        error: String(error),
      },
      { status: 500 }
    );
  }
}

