export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';
import { guardDebugEndpoint, logDebugAccess } from '@/lib/debug-guard';

export async function POST(request: NextRequest) {
  const guardError = guardDebugEndpoint();
  if (guardError) return guardError;
  logDebugAccess('/api/debug/init-db', 'POST');
  
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "cities" (
        "id" TEXT NOT NULL,
        "code" TEXT NOT NULL,
        "name" TEXT NOT NULL,
        "timezone" TEXT NOT NULL DEFAULT 'Europe/Warsaw',
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "cities_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "cities_code_key" UNIQUE ("code")
      );
    `;

    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "users" (
        "id" TEXT NOT NULL,
        "login" TEXT NOT NULL,
        "password" TEXT NOT NULL,
        "email" TEXT,
        "name" TEXT NOT NULL,
        "role" TEXT NOT NULL,
        "city" TEXT NOT NULL,
        "salaryGross" DOUBLE PRECISION,
        "salaryNet" DOUBLE PRECISION,
        "currency" TEXT NOT NULL DEFAULT 'PLN',
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "users_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "users_login_key" UNIQUE ("login")
      );
    `;

    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "settings" (
        "id" TEXT NOT NULL,
        "key" TEXT NOT NULL,
        "value" TEXT NOT NULL,
        "category" TEXT NOT NULL DEFAULT 'general',
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "settings_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "settings_key_key" UNIQUE ("key")
      );
    `;

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedPassword = await bcrypt.hash('password123', 10);

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ SQL
    const users = [
      { login: 'admin', name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', role: 'ADMIN', city: 'WARSAW' },
      { login: 'country_manager', name: '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª—å—Å–∫–∞—è', role: 'COUNTRY_MANAGER', city: 'WARSAW' },
      { login: 'hr_manager', name: '–ü–µ—Ç—Ä –ù–æ–≤–∞–∫', role: 'HIRING_MANAGER', city: 'WARSAW' },
      { login: 'ops_manager', name: '–ú–∞—Ä–∏—è –í–∏—à–Ω–µ–≤—Å–∫–∞—è', role: 'OPS_MANAGER', city: 'WARSAW' },
      { login: 'mixed_manager', name: '–¢–æ–º–∞—à –õ–µ—Å–Ω—è–∫', role: 'MIXED_MANAGER', city: 'KRAKOW' },
    ];

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
    for (const user of users) {
      await prisma.$executeRaw`
        INSERT INTO "users" (id, login, password, name, role, city, "isActive", "createdAt", "updatedAt")
        VALUES (
          ${crypto.randomUUID()},
          ${user.login},
          ${hashedPassword},
          ${user.name},
          ${user.role},
          ${user.city},
          true,
          CURRENT_TIMESTAMP,
          CURRENT_TIMESTAMP
        )
        ON CONFLICT (login) DO NOTHING;
      `;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settings = [
      { key: 'system_name', value: 'CleanWhale Analytics', category: 'general' },
      { key: 'default_timezone', value: 'Europe/Warsaw', category: 'general' },
    ];

    for (const setting of settings) {
      await prisma.settings.upsert({
        where: { key: setting.key },
        update: setting,
        create: setting,
      });
    }

    return NextResponse.json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!',
      users: users.map(u => ({ login: u.login, role: u.role })),
      credentials: '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø–∞—Ä–æ–ª—å: password123'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      },
      { status: 500 }
    );
  }
}
