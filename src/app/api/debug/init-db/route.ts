import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedPassword = await bcrypt.hash('password123', 10);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–∞—Ö
    const cities = [
      { code: 'WARSAW', name: '–í–∞—Ä—à–∞–≤–∞' },
      { code: 'KRAKOW', name: '–ö—Ä–∞–∫–æ–≤' },
      { code: 'GDANSK', name: '–ì–¥–∞–Ω—å—Å–∫' },
      { code: 'WROCLAW', name: '–í—Ä–æ—Ü–ª–∞–≤' },
      { code: 'POZNAN', name: '–ü–æ–∑–Ω–∞–Ω—å' },
      { code: 'LODZ', name: '–õ–æ–¥–∑—å' },
    ] as const;

    // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    for (const city of cities) {
      await prisma.cityInfo.upsert({
        where: { code: city.code },
        update: {},
        create: {
          code: city.code,
          name: city.name,
        },
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
      {
        login: 'admin',
        name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'admin@cleanwhale.com',
        role: 'ADMIN' as const,
        city: 'WARSAW' as const,
        salaryGross: 12000.0,
      },
      {
        login: 'country_manager',
        name: '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª—å—Å–∫–∞—è',
        email: 'anna.kowalska@cleanwhale.com',
        role: 'COUNTRY_MANAGER' as const,
        city: 'WARSAW' as const,
        salaryGross: 15000.0,
      },
      {
        login: 'hr_manager',
        name: '–ü–µ—Ç—Ä –ù–æ–≤–∞–∫',
        email: 'petr.novak@cleanwhale.com',
        role: 'HIRING_MANAGER' as const,
        city: 'WARSAW' as const,
        salaryGross: 8500.0,
      },
      {
        login: 'ops_manager',
        name: '–ú–∞—Ä–∏—è –í–∏—à–Ω–µ–≤—Å–∫–∞—è',
        email: 'maria.wisz@cleanwhale.com',
        role: 'OPS_MANAGER' as const,
        city: 'WARSAW' as const,
        salaryGross: 7800.0,
      },
      {
        login: 'mixed_manager',
        name: '–¢–æ–º–∞—à –õ–µ—Å–Ω—è–∫',
        email: 'tomasz.lesny@cleanwhale.com',
        role: 'MIXED_MANAGER' as const,
        city: 'KRAKOW' as const,
        salaryGross: 9200.0,
      },
    ];

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userData of users) {
      await prisma.user.upsert({
        where: { login: userData.login },
        update: {},
        create: {
          ...userData,
          password: hashedPassword,
        },
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settings = [
      { key: 'system_name', value: 'CleanWhale Analytics', category: 'general' },
      { key: 'default_timezone', value: 'Europe/Warsaw', category: 'general' },
    ];

    for (const setting of settings) {
      await prisma.settings.upsert({
        where: { key: setting.key },
        update: setting,
        create: setting,
      });
    }

    return NextResponse.json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!',
      users: users.map(u => ({ login: u.login, role: u.role })),
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      },
      { status: 500 }
    );
  }
}
