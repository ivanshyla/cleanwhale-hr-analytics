export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { guardDebugEndpoint, logDebugAccess } from '@/lib/debug-guard';

export async function POST(request: NextRequest) {
  const guardError = guardDebugEndpoint();
  if (guardError) return guardError;
  logDebugAccess('/api/debug/init-cities', 'POST');
  
  try {
    console.log('üèôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ enum City –≤ schema.prisma
    const cities = [
      { code: 'WARSAW', name: '–í–∞—Ä—à–∞–≤–∞' },
      { code: 'KRAKOW', name: '–ö—Ä–∞–∫–æ–≤' },
      { code: 'WROCLAW', name: '–í—Ä–æ—Ü–ª–∞–≤' },
      { code: 'GDANSK', name: '–ì–¥–∞–Ω—å—Å–∫' },
      { code: 'LODZ', name: '–õ–æ–¥–∑—å' },
      { code: 'POZNAN', name: '–ü–æ–∑–Ω–∞–Ω—å' },
      { code: 'KATOWICE', name: '–ö–∞—Ç–æ–≤–∏—Ü–µ' },
      { code: 'BIALYSTOK', name: '–ë–µ–ª–æ—Å—Ç–æ–∫' },
      { code: 'LUBLIN', name: '–õ—é–±–ª–∏–Ω' },
    ];

    const results = [];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
    for (const city of cities) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
      const existing = await prisma.$queryRaw<any[]>`
        SELECT id FROM cities WHERE code = ${city.code}::"City"
      `;
      
      if (existing.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        await prisma.$executeRaw`
          INSERT INTO cities (code, name, timezone, "isActive", "createdAt")
          VALUES (${city.code}::"City", ${city.name}, 'Europe/Warsaw', true, NOW())
        `;
        console.log(`‚úÖ –ì–æ—Ä–æ–¥ ${city.name} (${city.code}) - —Å–æ–∑–¥–∞–Ω`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        await prisma.$executeRaw`
          UPDATE cities 
          SET name = ${city.name}, "isActive" = true
          WHERE code = ${city.code}::"City"
        `;
        console.log(`‚úÖ –ì–æ—Ä–æ–¥ ${city.name} (${city.code}) - –æ–±–Ω–æ–≤–ª–µ–Ω`);
      }
      
      results.push({ code: city.code, name: city.name });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ
    const count = await prisma.cityInfo.count();

    return NextResponse.json({
      success: true,
      message: '–ì–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
      cities: results,
      count: count,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤',
        error: String(error),
      },
      { status: 500 }
    );
  }
}

