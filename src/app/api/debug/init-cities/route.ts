export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { City } from '@prisma/client';
import { guardDebugEndpoint, logDebugAccess } from '@/lib/debug-guard';

export async function POST(request: NextRequest) {
  const guardError = guardDebugEndpoint();
  if (guardError) return guardError;
  logDebugAccess('/api/debug/init-cities', 'POST');
  
  try {
    console.log('üèôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ enum City –≤ schema.prisma
    const cities: Array<{ code: City, name: string }> = [
      { code: City.WARSAW, name: '–í–∞—Ä—à–∞–≤–∞' },
      { code: City.KRAKOW, name: '–ö—Ä–∞–∫–æ–≤' },
      { code: City.WROCLAW, name: '–í—Ä–æ—Ü–ª–∞–≤' },
      { code: City.GDANSK, name: '–ì–¥–∞–Ω—å—Å–∫' },
      { code: City.LODZ, name: '–õ–æ–¥–∑—å' },
      { code: City.POZNAN, name: '–ü–æ–∑–Ω–∞–Ω—å' },
      { code: City.KATOWICE, name: '–ö–∞—Ç–æ–≤–∏—Ü–µ' },
      { code: City.BIALYSTOK, name: '–ë–µ–ª–æ—Å—Ç–æ–∫' },
      { code: City.LUBLIN, name: '–õ—é–±–ª–∏–Ω' },
    ];

    const results = [];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Prisma ORM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    for (const city of cities) {
      try {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥
        const existing = await prisma.cityInfo.findFirst({
          where: { code: city.code }
        });
        
        if (existing) {
          // –û–±–Ω–æ–≤–ª—è–µ–º
          await prisma.cityInfo.update({
            where: { id: existing.id },
            data: {
              name: city.name,
              isActive: true
            }
          });
          console.log(`‚úÖ –ì–æ—Ä–æ–¥ ${city.name} (${city.code}) - –æ–±–Ω–æ–≤–ª–µ–Ω (id: ${existing.id})`);
          results.push({ code: String(city.code), name: city.name, id: existing.id });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          const created = await prisma.cityInfo.create({
            data: {
              code: city.code,
              name: city.name,
              timezone: 'Europe/Warsaw',
              isActive: true
            }
          });
          console.log(`‚úÖ –ì–æ—Ä–æ–¥ ${city.name} (${city.code}) - —Å–æ–∑–¥–∞–Ω (id: ${created.id})`);
          results.push({ code: String(city.code), name: city.name, id: created.id });
        }
      } catch (cityError: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city.name}:`, cityError.message);
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', cityError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ
    const count = await prisma.cityInfo.count();

    return NextResponse.json({
      success: true,
      message: '–ì–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
      cities: results,
      count: count,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤',
        error: String(error),
      },
      { status: 500 }
    );
  }
}

