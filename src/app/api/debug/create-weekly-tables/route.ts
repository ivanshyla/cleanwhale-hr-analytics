export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { Client } from 'pg';
import { guardDebugEndpoint, logDebugAccess } from '@/lib/debug-guard';

export async function POST(request: NextRequest) {
  const guardError = guardDebugEndpoint();
  if (guardError) return guardError;
  logDebugAccess('/api/debug/create-weekly-tables', 'POST');
  
  try {
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è weekly reports...');

    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
      throw new Error('DATABASE_URL is not set');
    }

    const client = new Client({
      connectionString: DATABASE_URL,
      ssl: {
        rejectUnauthorized: false,
      },
    });

    await client.connect();

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É weekly_reports
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É weekly_reports...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "weekly_reports" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "weekIso" TEXT NOT NULL,
        "weekStartDate" TIMESTAMP(3) NOT NULL,
        "weekEndDate" TIMESTAMP(3) NOT NULL,
        "workdays" DOUBLE PRECISION NOT NULL DEFAULT 0,
        "stressLevel" INTEGER NOT NULL DEFAULT 0,
        "overtime" BOOLEAN NOT NULL DEFAULT false,
        "overtimeHours" DOUBLE PRECISION,
        "nextWeekSchedule" JSONB,
        "goodWorkWith" TEXT,
        "badWorkWith" TEXT,
        "teamComment" TEXT,
        "notes" TEXT,
        "isCompleted" BOOLEAN NOT NULL DEFAULT false,
        "submittedAt" TIMESTAMP(3),
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "weekly_reports_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "weekly_reports_userId_weekIso_key" UNIQUE ("userId", "weekIso"),
        CONSTRAINT "weekly_reports_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É hr_metrics
    console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É hr_metrics...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "hr_metrics" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "reportId" TEXT NOT NULL,
        "weekIso" TEXT NOT NULL,
        "interviews" INTEGER NOT NULL DEFAULT 0,
        "jobPosts" INTEGER NOT NULL DEFAULT 0,
        "registrations" INTEGER NOT NULL DEFAULT 0,
        "difficultCases" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "hr_metrics_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "hr_metrics_reportId_key" UNIQUE ("reportId"),
        CONSTRAINT "hr_metrics_userId_weekIso_key" UNIQUE ("userId", "weekIso"),
        CONSTRAINT "hr_metrics_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "hr_metrics_reportId_fkey" FOREIGN KEY ("reportId") REFERENCES "weekly_reports"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ops_metrics  
    console.log('‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ops_metrics...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS "ops_metrics" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "reportId" TEXT NOT NULL,
        "weekIso" TEXT NOT NULL,
        "trengoMessages" INTEGER NOT NULL DEFAULT 0,
        "trengoTicketsResolved" INTEGER NOT NULL DEFAULT 0,
        "crmTicketsResolved" INTEGER NOT NULL DEFAULT 0,
        "crmOrdersCity" INTEGER NOT NULL DEFAULT 0,
        "difficultCleanerCases" TEXT,
        "difficultClientCases" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT "ops_metrics_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "ops_metrics_reportId_key" UNIQUE ("reportId"),
        CONSTRAINT "ops_metrics_userId_weekIso_key" UNIQUE ("userId", "weekIso"),
        CONSTRAINT "ops_metrics_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "ops_metrics_reportId_fkey" FOREIGN KEY ("reportId") REFERENCES "weekly_reports"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('weekly_reports', 'hr_metrics', 'ops_metrics')
      ORDER BY table_name;
    `);

    const weeklyReportsColumns = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'weekly_reports' 
      ORDER BY ordinal_position;
    `);

    const hrMetricsColumns = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'hr_metrics' 
      ORDER BY ordinal_position;
    `);

    const opsMetricsColumns = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'ops_metrics' 
      ORDER BY ordinal_position;
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexesResult = await client.query(`
      SELECT tablename, indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename IN ('weekly_reports', 'hr_metrics', 'ops_metrics')
      AND indexdef LIKE '%UNIQUE%'
      ORDER BY tablename, indexname;
    `);

    await client.end();

    return NextResponse.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü—ã –¥–ª—è weekly reports —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
      tables_created: tablesResult.rows.map(row => row.table_name),
      details: {
        weekly_reports_columns: weeklyReportsColumns.rows,
        hr_metrics_columns: hrMetricsColumns.rows,
        ops_metrics_columns: opsMetricsColumns.rows,
        unique_indexes: indexesResult.rows,
      },
      steps_completed: [
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ weekly_reports —Å –ø–æ–ª—è–º–∏ weekIso, workdays, stressLevel –∏ –¥—Ä.',
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ hr_metrics —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º (userId, weekIso)',
        '‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ops_metrics —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º (userId, weekIso)',
        '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã foreign key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        '‚úÖ –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      ],
      next_steps: [
        '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã',
        'HR –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å HR —Ñ–æ—Ä–º—ã',
        'Ops –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å Ops —Ñ–æ—Ä–º—ã',
        'Mixed –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –æ–±–µ —Ñ–æ—Ä–º—ã',
      ]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        debug: {
          DATABASE_URL: process.env.DATABASE_URL ? 'Set' : 'Not set',
          error_details: error
        }
      },
      { status: 500 }
    );
  }
}
