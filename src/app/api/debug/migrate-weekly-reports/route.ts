import { NextRequest, NextResponse } from 'next/server';
import { Client } from 'pg';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã –¥–ª—è weekly reports...');

    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
      throw new Error('DATABASE_URL is not set');
    }

    const client = new Client({
      connectionString: DATABASE_URL,
      ssl: {
        rejectUnauthorized: false,
      },
    });

    await client.connect();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ weekIso –≤ hr_metrics –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º weekIso –≤ hr_metrics...');
    await client.query(`
      ALTER TABLE "hr_metrics" 
      ADD COLUMN IF NOT EXISTS "weekIso" TEXT;
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ weekIso –≤ ops_metrics –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º weekIso –≤ ops_metrics...');
    await client.query(`
      ALTER TABLE "ops_metrics" 
      ADD COLUMN IF NOT EXISTS "weekIso" TEXT;
    `);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º weekIso –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ report'–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('üîó –ó–∞–ø–æ–ª–Ω—è–µ–º weekIso –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');
    
    // –î–ª—è hr_metrics
    await client.query(`
      UPDATE "hr_metrics" 
      SET "weekIso" = wr."weekIso"
      FROM "weekly_reports" wr 
      WHERE "hr_metrics"."reportId" = wr.id 
      AND "hr_metrics"."weekIso" IS NULL;
    `);

    // –î–ª—è ops_metrics
    await client.query(`
      UPDATE "ops_metrics" 
      SET "weekIso" = wr."weekIso"
      FROM "weekly_reports" wr 
      WHERE "ops_metrics"."reportId" = wr.id 
      AND "ops_metrics"."weekIso" IS NULL;
    `);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã...');
    try {
      await client.query(`DROP INDEX IF EXISTS "hr_metrics_userId_reportId_key";`);
      await client.query(`DROP INDEX IF EXISTS "ops_metrics_userId_reportId_key";`);
    } catch (error) {
      console.log('–°—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã...');
    
    // –î–ª—è hr_metrics (userId, weekIso)
    await client.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS "hr_metrics_userId_weekIso_key" 
      ON "hr_metrics"("userId", "weekIso");
    `);

    // –î–ª—è ops_metrics (userId, weekIso)
    await client.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS "ops_metrics_userId_weekIso_key" 
      ON "ops_metrics"("userId", "weekIso");
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...');
    
    const hrColumnsResult = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'hr_metrics' 
      ORDER BY ordinal_position;
    `);

    const opsColumnsResult = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'ops_metrics' 
      ORDER BY ordinal_position;
    `);

    const hrIndexesResult = await client.query(`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'hr_metrics' 
      AND indexdef LIKE '%weekIso%';
    `);

    const opsIndexesResult = await client.query(`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'ops_metrics' 
      AND indexdef LIKE '%weekIso%';
    `);

    await client.end();

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã weekly reports –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
      details: {
        hr_metrics_columns: hrColumnsResult.rows,
        ops_metrics_columns: opsColumnsResult.rows,
        hr_indexes: hrIndexesResult.rows,
        ops_indexes: opsIndexesResult.rows,
      },
      steps_completed: [
        '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weekIso –≤ hr_metrics',
        '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weekIso –≤ ops_metrics', 
        '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω—ã weekIso –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤',
        '‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã',
        '‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (userId, weekIso)',
      ]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        debug: {
          DATABASE_URL: process.env.DATABASE_URL ? 'Set' : 'Not set',
          error_details: error
        }
      },
      { status: 500 }
    );
  }
}
