/**
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ CleanWhale
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
 */

interface EmployeeMetrics {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  workingDays: number;
  interviews: number;
  hiredPeople: number;
  ordersProcessed: number;
  teamMeetings: number;
  messages: number;
  
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  stressLevel: number; // 1-10
  overtime: boolean;
  complaints: number;
  difficultSituations: string;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  trainingHours: number;
  clientIssues: string;
  cleanerIssues: string;
}

interface RatingWeights {
  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –ª—É—á—à–µ)
  workingDays: number;
  interviews: number;
  hiredPeople: number;
  ordersProcessed: number;
  teamMeetings: number;
  messages: number;
  trainingHours: number;
  
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º —Ö—É–∂–µ)
  stressLevel: number;
  overtime: number;
  complaints: number;
  issuesCount: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
}

// –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å)
const RATING_WEIGHTS: RatingWeights = {
  // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  workingDays: 10,      // –ë–∞–∑–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä - –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏
  ordersProcessed: 8,   // –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  hiredPeople: 15,      // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ - –Ω–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
  
  // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
  interviews: 12,       // –í–∞–∂–Ω–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
  teamMeetings: 6,      // –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
  messages: 3,          // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏
  trainingHours: 7,     // –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
  
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–≤—ã—á–∏—Ç–∞—é—Ç—Å—è –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)
  stressLevel: -4,      // –°—Ç—Ä–µ—Å—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã
  overtime: -8,         // –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ - –ø–ª–æ—Ö–æ–π –∑–Ω–∞–∫
  complaints: -12,      // –ñ–∞–ª–æ–±—ã —Å–µ—Ä—å–µ–∑–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥
  issuesCount: -5,      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º
};

/**
 * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö
 */
function countIssues(text: string): number {
  if (!text || text.trim().length === 0) return 0;
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
  const problemKeywords = ['–ø—Ä–æ–±–ª–µ–º–∞', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '–æ—à–∏–±–∫–∞', '–∂–∞–ª–æ–±–∞', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ'];
  const sentences = text.split(/[.!?;]/);
  
  let issueCount = 0;
  
  problemKeywords.forEach(keyword => {
    const matches = text.toLowerCase().match(new RegExp(keyword, 'g'));
    if (matches) issueCount += matches.length;
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
  issueCount += Math.max(0, sentences.length - 1);
  
  return Math.min(issueCount, 10); // –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–±–ª–µ–º
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
 */
function normalize(value: number, min: number, max: number): number {
  return Math.max(0, Math.min(100, ((value - min) / (max - min)) * 100));
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
export function calculateEmployeeRating(metrics: Partial<EmployeeMetrics>): {
  totalRating: number;
  components: {
    productivity: number;
    communication: number;
    quality: number;
    wellbeing: number;
  };
  breakdown: Array<{
    metric: string;
    value: number;
    weight: number;
    contribution: number;
    isNegative: boolean;
  }>;
} {
  const breakdown: Array<{
    metric: string;
    value: number;
    weight: number;
    contribution: number;
    isNegative: boolean;
  }> = [];

  let totalScore = 50; // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥

  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  const positiveMetrics = [
    { key: 'workingDays', label: '–†–∞–±–æ—á–∏–µ –¥–Ω–∏', max: 7 },
    { key: 'interviews', label: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è', max: 20 },
    { key: 'hiredPeople', label: '–ù–∞–Ω—è—Ç–æ –ª—é–¥–µ–π', max: 10 },
    { key: 'ordersProcessed', label: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤', max: 100 },
    { key: 'teamMeetings', label: '–í—Å—Ç—Ä–µ—á–∏ –∫–æ–º–∞–Ω–¥—ã', max: 15 },
    { key: 'messages', label: '–°–æ–æ–±—â–µ–Ω–∏—è', max: 200 },
    { key: 'trainingHours', label: '–ß–∞—Å—ã –æ–±—É—á–µ–Ω–∏—è', max: 40 },
  ];

  positiveMetrics.forEach(({ key, label, max }) => {
    const value = metrics[key as keyof EmployeeMetrics] as number || 0;
    const weight = RATING_WEIGHTS[key as keyof RatingWeights];
    const normalizedValue = normalize(value, 0, max);
    const contribution = (normalizedValue / 100) * weight;
    
    totalScore += contribution;
    breakdown.push({
      metric: label,
      value,
      weight,
      contribution,
      isNegative: false,
    });
  });

  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  const stressLevel = metrics.stressLevel || 1;
  const stressContribution = ((stressLevel - 1) / 9) * Math.abs(RATING_WEIGHTS.stressLevel);
  totalScore += RATING_WEIGHTS.stressLevel * (stressLevel / 10);
  breakdown.push({
    metric: '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞',
    value: stressLevel,
    weight: RATING_WEIGHTS.stressLevel,
    contribution: -stressContribution,
    isNegative: true,
  });

  if (metrics.overtime) {
    totalScore += RATING_WEIGHTS.overtime;
    breakdown.push({
      metric: '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏',
      value: 1,
      weight: RATING_WEIGHTS.overtime,
      contribution: RATING_WEIGHTS.overtime,
      isNegative: true,
    });
  }

  const complaints = metrics.complaints || 0;
  if (complaints > 0) {
    const complaintContribution = complaints * RATING_WEIGHTS.complaints;
    totalScore += complaintContribution;
    breakdown.push({
      metric: '–ñ–∞–ª–æ–±—ã',
      value: complaints,
      weight: RATING_WEIGHTS.complaints,
      contribution: complaintContribution,
      isNegative: true,
    });
  }

  // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const issuesText = [
    metrics.difficultSituations || '',
    metrics.clientIssues || '',
    metrics.cleanerIssues || ''
  ].join(' ');
  
  const issuesCount = countIssues(issuesText);
  if (issuesCount > 0) {
    const issuesContribution = issuesCount * RATING_WEIGHTS.issuesCount;
    totalScore += issuesContribution;
    breakdown.push({
      metric: '–£–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
      value: issuesCount,
      weight: RATING_WEIGHTS.issuesCount,
      contribution: issuesContribution,
      isNegative: true,
    });
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
  const finalRating = Math.max(0, Math.min(100, totalScore));

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
  const productivity = Math.max(0, Math.min(100, 
    ((metrics.workingDays || 0) * 10 + (metrics.ordersProcessed || 0) * 0.5 + (metrics.hiredPeople || 0) * 8) / 2
  ));

  const communication = Math.max(0, Math.min(100,
    ((metrics.teamMeetings || 0) * 5 + (metrics.messages || 0) * 0.3 + (metrics.interviews || 0) * 3) / 2
  ));

  const quality = Math.max(0, Math.min(100,
    100 - (complaints * 15) - (issuesCount * 8) - (stressLevel * 3)
  ));

  const wellbeing = Math.max(0, Math.min(100,
    100 - (stressLevel * 8) - (metrics.overtime ? 20 : 0) - (issuesCount * 5)
  ));

  return {
    totalRating: Math.round(finalRating),
    components: {
      productivity: Math.round(productivity),
      communication: Math.round(communication),
      quality: Math.round(quality),
      wellbeing: Math.round(wellbeing),
    },
    breakdown,
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
export function getRatingColor(rating: number): {
  color: string;
  bgColor: string;
  textColor: string;
  label: string;
} {
  if (rating >= 80) {
    return {
      color: '#10B981',
      bgColor: '#D1FAE5',
      textColor: '#065F46',
      label: '–û—Ç–ª–∏—á–Ω—ã–π'
    };
  } else if (rating >= 65) {
    return {
      color: '#3B82F6',
      bgColor: '#DBEAFE',
      textColor: '#1E40AF',
      label: '–•–æ—Ä–æ—à–∏–π'
    };
  } else if (rating >= 45) {
    return {
      color: '#F59E0B',
      bgColor: '#FEF3C7',
      textColor: '#92400E',
      label: '–°—Ä–µ–¥–Ω–∏–π'
    };
  } else {
    return {
      color: '#EF4444',
      bgColor: '#FEE2E2',
      textColor: '#991B1B',
      label: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
export function generateRecommendations(metrics: Partial<EmployeeMetrics>, rating: number): string[] {
  const recommendations: string[] = [];

  if (rating < 50) {
    recommendations.push('üö® –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞');
  }

  if ((metrics.stressLevel || 0) > 7) {
    recommendations.push('üò∞ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏');
  }

  if (metrics.overtime) {
    recommendations.push('‚è∞ –ß–∞—Å—Ç—ã–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á');
  }

  if ((metrics.complaints || 0) > 2) {
    recommendations.push('‚ö†Ô∏è –ú–Ω–æ–≥–æ –∂–∞–ª–æ–± - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –±–µ—Å–µ–¥—É');
  }

  if ((metrics.workingDays || 0) < 4) {
    recommendations.push('üìÖ –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å - —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã');
  }

  if ((metrics.teamMeetings || 0) === 0) {
    recommendations.push('ü§ù –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö - —É–ª—É—á—à–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å');
  }

  if ((metrics.hiredPeople || 0) === 0 && (metrics.interviews || 0) > 5) {
    recommendations.push('üéØ –ú–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π, –Ω–æ –Ω–µ—Ç –Ω–∞–π–º–∞ - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞');
  }

  if (rating > 80) {
    recommendations.push('‚≠ê –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏–ª–∏ –±–æ–Ω—É—Å');
  }

  return recommendations;
}
