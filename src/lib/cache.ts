/**
 * –ö—ç—à –¥–ª—è API endpoints
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç in-memory –∫—ç—à (Redis –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
 */

interface CacheConfig {
  ttl: number; // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  key: string;
}

class CacheManager {
  private memoryCache = new Map<string, { data: any; expires: number }>();

  constructor() {
    console.log('‚ÑπÔ∏è Using in-memory cache');
  }

  async get<T>(key: string): Promise<T | null> {
    const cached = this.memoryCache.get(key);
    if (!cached) return null;
    
    if (cached.expires < Date.now()) {
      this.memoryCache.delete(key);
      return null;
    }
    
    return cached.data;
  }

  async set<T>(key: string, data: T, ttl: number): Promise<void> {
    this.memoryCache.set(key, {
      data,
      expires: Date.now() + (ttl * 1000)
    });
  }

  async invalidate(pattern: string): Promise<void> {
    // Clear memory cache entries matching pattern
    for (const key of this.memoryCache.keys()) {
      if (key.includes(pattern)) {
        this.memoryCache.delete(key);
      }
    }
  }
}

// Singleton instance
const cache = new CacheManager();

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
 */
export function withCache<T extends any[], R>(
  fn: (...args: T) => Promise<R>,
  keyGenerator: (...args: T) => string,
  ttl: number = 300 // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
) {
  return async (...args: T): Promise<R> => {
    const key = keyGenerator(...args);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cached = await cache.get<R>(key);
    if (cached) {
      console.log(`üì¶ Cache hit: ${key}`);
      return cached;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`üîÑ Cache miss: ${key}`);
    const result = await fn(...args);
    await cache.set(key, result, ttl);
    
    return result;
  };
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
 */
export const cacheUtils = {
  async get<T>(key: string): Promise<T | null> {
    return cache.get<T>(key);
  },
  
  async set<T>(key: string, data: T, ttl: number = 300): Promise<void> {
    return cache.set(key, data, ttl);
  },
  
  async invalidate(pattern: string): Promise<void> {
    return cache.invalidate(pattern);
  },
  
  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  keys: {
    users: (city?: string, role?: string) => `users:${city || 'all'}:${role || 'all'}`,
    countryAnalytics: (weekIso: string) => `country-analytics:${weekIso}`,
    dashboardStats: (userId: string) => `dashboard-stats:${userId}`,
    workSchedules: (userId: string, weekStart?: string) => `work-schedules:${userId}:${weekStart || 'all'}`,
  }
};

export default cache;