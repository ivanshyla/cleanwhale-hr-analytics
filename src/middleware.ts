import { NextRequest, NextResponse } from 'next/server';

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  if (
    pathname === '/login' ||
    pathname === '/' ||
    pathname.startsWith('/api/auth/login') ||
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/public/') ||
    pathname.includes('.') // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  ) {
    return NextResponse.next();
  }

  // ‚ùå –ö–†–ò–¢–ò–ß–ù–û: Debug endpoints –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ production
  if (pathname.startsWith('/api/debug/')) {
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json(
        { error: 'Debug endpoints disabled in production' },
        { status: 404 }
      );
    }
    // –í dev —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ ADMIN —Ä–æ–ª—å
    const token = request.cookies.get('token')?.value;
    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT –±–µ–∑ crypto –º–æ–¥—É–ª—è (Edge Runtime compatible)
      const parts = token.split('.');
      if (parts.length !== 3) {
        throw new Error('Invalid token format');
      }
      
      const payload = JSON.parse(atob(parts[1]));
      if (payload.role !== 'ADMIN') {
        return NextResponse.json({ error: 'Admin only' }, { status: 403 });
      }
      return NextResponse.next();
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }
  }

  // –î–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü /dashboard/** —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (pathname.startsWith('/dashboard')) {
    const token = request.cookies.get('token')?.value || 
                  request.headers.get('authorization')?.replace('Bearer ', '');

    if (!token) {
      // –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞!
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT –±–µ–∑ crypto –º–æ–¥—É–ª—è (Edge Runtime compatible)
      const parts = token.split('.');
      if (parts.length !== 3) {
        throw new Error('Invalid token format');
      }
      
      const payload = JSON.parse(atob(parts[1]));
      const now = Math.floor(Date.now() / 1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (payload.exp && payload.exp < now) {
        throw new Error('Token expired');
      }
      
      console.log('‚úÖ Middleware: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', payload.login);
      // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
      return NextResponse.next();
    } catch (error: any) {
      // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
      console.warn('üîê Invalid/expired token in middleware:', error.message, 'Token length:', token?.length);
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      loginUrl.searchParams.set('reason', 'expired');
      
      // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      const response = NextResponse.redirect(loginUrl);
      response.cookies.delete('token');
      return response;
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}
