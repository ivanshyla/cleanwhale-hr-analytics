import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.count();
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${users}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    const reports = await prisma.weeklyReport.count();
    console.log(`üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: ${reports}`);
    
    if (reports > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
      const latestReports = await prisma.weeklyReport.findMany({
        take: 5,
        orderBy: { weekIso: 'desc' },
        include: {
          user: { select: { name: true, login: true } }
        }
      });
      
      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:');
      latestReports.forEach(r => {
        console.log(`  - ${r.user.name} (${r.user.login}): –Ω–µ–¥–µ–ª—è ${r.weekIso}`);
      });
      
      console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    } else {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ!');
      console.log('\nüí° –†–µ—à–µ–Ω–∏–µ:');
      console.log('1. –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"');
      console.log('2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é');
      console.log('3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
    console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω:');
    console.log('   docker ps | grep postgres');
  } finally {
    await prisma.$disconnect();
  }
}

checkData();



