import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π)
let authCookie = '';

async function login() {
  console.log('üîê –õ–æ–≥–∏–Ω...');
  const response = await fetch(`${API_BASE}/api/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      login: 'country_manager',
      password: 'password123',
    }),
  });

  if (response.ok) {
    // –ü–æ–ª—É—á–∞–µ–º cookie –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const setCookie = response.headers.get('set-cookie');
    if (setCookie) {
      authCookie = setCookie.split(';')[0];
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω\n');
      return true;
    }
  }
  
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏\n');
  return false;
}

async function measureRequest(name, url, options = {}) {
  const start = Date.now();
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        ...options.headers,
        'Cookie': authCookie,
      },
    });
    
    const duration = Date.now() - start;
    const status = response.status;
    
    if (response.ok) {
      const data = await response.json();
      const cached = data.cached ? 'üü¢ CACHED' : 'üîµ FRESH';
      console.log(`‚úÖ ${name}: ${duration}ms ${cached} (status: ${status})`);
      return { success: true, duration, cached: data.cached };
    } else {
      console.log(`‚ùå ${name}: ${duration}ms (status: ${status})`);
      return { success: false, duration };
    }
  } catch (error) {
    const duration = Date.now() - start;
    console.log(`‚ùå ${name}: ${duration}ms (error: ${error.message})`);
    return { success: false, duration, error: error.message };
  }
}

async function testPerformance() {
  console.log('‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API\n');
  console.log('='.repeat(50) + '\n');

  // –õ–æ–≥–∏–Ω
  const loggedIn = await login();
  if (!loggedIn) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    return;
  }

  await new Promise(resolve => setTimeout(resolve, 500));

  // 1. –¢–µ—Å—Ç /api/auth/me
  console.log('üìã –¢–µ—Å—Ç 1: /api/auth/me');
  await measureRequest('auth/me #1', `${API_BASE}/api/auth/me`);
  await measureRequest('auth/me #2', `${API_BASE}/api/auth/me`);
  await measureRequest('auth/me #3', `${API_BASE}/api/auth/me`);
  console.log('');

  // 2. –¢–µ—Å—Ç /api/dashboard-stats
  console.log('üìä –¢–µ—Å—Ç 2: /api/dashboard-stats');
  await measureRequest('dashboard-stats #1', `${API_BASE}/api/dashboard-stats`);
  await measureRequest('dashboard-stats #2', `${API_BASE}/api/dashboard-stats`);
  console.log('');

  // 3. –¢–µ—Å—Ç /api/country-analytics (–≥–ª–∞–≤–Ω—ã–π!)
  console.log('üåç –¢–µ—Å—Ç 3: /api/country-analytics (—Å –∫—ç—à–µ–º)');
  const result1 = await measureRequest('country-analytics #1', `${API_BASE}/api/country-analytics`);
  await new Promise(resolve => setTimeout(resolve, 100));
  
  const result2 = await measureRequest('country-analytics #2', `${API_BASE}/api/country-analytics`);
  await new Promise(resolve => setTimeout(resolve, 100));
  
  const result3 = await measureRequest('country-analytics #3', `${API_BASE}/api/country-analytics`);
  console.log('');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
  if (result1.success && result2.success && result3.success) {
    if (result2.cached || result3.cached) {
      console.log('‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log(`   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${result1.duration}ms`);
      console.log(`   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${result2.cached ? result2.duration : result3.duration}ms`);
      const speedup = Math.round(result1.duration / (result2.cached ? result2.duration : result3.duration));
      console.log(`   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${speedup}x\n`);
    } else {
      console.log('‚ö†Ô∏è  –ö—ç—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—à–ª–æ >60 —Å–µ–∫)\n');
    }
  }

  // 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∫ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ)
  console.log('üöÄ –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
  const parallelStart = Date.now();
  await Promise.all([
    measureRequest('parallel: auth/me', `${API_BASE}/api/auth/me`),
    measureRequest('parallel: dashboard-stats', `${API_BASE}/api/dashboard-stats`),
    measureRequest('parallel: country-analytics', `${API_BASE}/api/country-analytics`),
  ]);
  const parallelDuration = Date.now() - parallelStart;
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${parallelDuration}ms\n`);

  // 5. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
  console.log('üêå –¢–µ—Å—Ç 5: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)');
  const sequentialStart = Date.now();
  await measureRequest('sequential: auth/me', `${API_BASE}/api/auth/me`);
  await measureRequest('sequential: dashboard-stats', `${API_BASE}/api/dashboard-stats`);
  await measureRequest('sequential: country-analytics', `${API_BASE}/api/country-analytics`);
  const sequentialDuration = Date.now() - sequentialStart;
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${sequentialDuration}ms\n`);

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  console.log('='.repeat(50));
  console.log('\nüìà –ò—Ç–æ–≥–∏:\n');
  console.log(`–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:      ${parallelDuration}ms`);
  console.log(`–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:  ${sequentialDuration}ms`);
  const improvement = Math.round((sequentialDuration / parallelDuration - 1) * 100);
  console.log(`–£–ª—É—á—à–µ–Ω–∏–µ:                 ${improvement}%`);
  console.log(`–£—Å–∫–æ—Ä–µ–Ω–∏–µ:                 ${(sequentialDuration / parallelDuration).toFixed(1)}x\n`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (parallelDuration > 2000) {
    console.log('  ‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å—ã –≤—Å–µ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ (>2 —Å–µ–∫)');
    console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ Supabase (–º–æ–∂–µ—Ç –±—ã—Ç—å ~500-1000ms)');
    console.log('  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ connection pooling');
    console.log('  - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å pool size –≤ Prisma');
  } else if (parallelDuration > 1000) {
    console.log('  ‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å—ã —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—Å—Ç—Ä—ã–µ (1-2 —Å–µ–∫)');
    console.log('  - –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î');
    console.log('  - –ö—ç—à –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö');
  } else {
    console.log('  ‚úÖ –ó–∞–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä—ã–µ (<1 —Å–µ–∫)!');
  }
}

testPerformance().catch(console.error);

